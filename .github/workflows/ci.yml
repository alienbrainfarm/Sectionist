name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Lint with flake8
      run: |
        cd backend
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Treat all other issues as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        
    - name: Format check with black
      run: |
        cd backend
        black --check --diff .
        
    - name: Type check with mypy
      run: |
        cd backend
        mypy --install-types --non-interactive . || true
        
    - name: Run tests with pytest
      run: |
        cd backend
        pytest -v --cov=. --cov-report=xml --cov-report=term
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false
        
  test-frontend:
    name: Frontend Tests
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 'latest'
        
    - name: Cache derived data
      uses: actions/cache@v4
      with:
        path: ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-xcode-derived-data-${{ hashFiles('Sectionist/**') }}
        restore-keys: |
          ${{ runner.os }}-xcode-derived-data-
          
    - name: Build SwiftUI project
      run: |
        cd Sectionist
        xcodebuild -project Sectionist.xcodeproj -scheme Sectionist -configuration Debug build
        
    - name: Run SwiftUI tests
      run: |
        cd Sectionist  
        xcodebuild test -project Sectionist.xcodeproj -scheme Sectionist -destination 'platform=macOS'
        
  lint-and-format:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy
        
    - name: Check Python formatting with black
      run: |
        cd backend
        black --check --diff --color .
        
    - name: Lint Python code with flake8
      run: |
        cd backend
        flake8 . --max-line-length=88 --extend-ignore=E203,W503
        
    - name: Type check with mypy
      run: |
        cd backend
        mypy --install-types --non-interactive . || echo "Type checking completed with warnings"
        
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: Start backend server for integration tests
      run: |
        cd backend
        python server.py &
        sleep 10  # Wait for server to start
        
    - name: Run integration tests
      run: |
        cd backend
        # Test if server is responding
        curl -f http://localhost:5000/health || echo "Health check endpoint not yet implemented"
        
    - name: Run end-to-end analysis test
      run: |
        cd backend
        python test_segmentation.py